<?xml version="1.0" encoding="utf-8"?>
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
                xmlns:controls="ns.flex.controls.*"
                addedToStage="stage.addEventListener(MouseEvent.CLICK, onStageClick)">
    <mx:Script>
		<![CDATA[
        import modules.Views;

        import mx.controls.Alert;
        import mx.managers.PopUpManager;

        import ns.flex.support.MenuSupport;
        import ns.flex.util.ArrayCollectionPlus;
        import ns.flex.util.DictManager;
        import ns.flex.util.MessageUtil;
        import ns.flex.util.RemoteUtil;
        import ns.flex.util.Session;

        import mx.rpc.remoting.mxml.RemoteObject;

        import popup.Login;

        [Bindable]
        public var menuTitle:String = '菜单';

        [Bindable]
        public var menus:XML;
        public var spareMintues:int;
        [Bindable]
        public var appTitle:String = '';
        private var timer:Timer;
        private var popLogin:Login = new Login();
        private var holdHeartBeat:Boolean = false;
        private var views:Views = new Views();
        public var showWelcomeFirst:Boolean = true;


        private function initTimer(mintues:int):void {
            removeTimer()
            if (mintues > 0) {
                spareMintues = mintues;
                timer = new Timer(60 * 1000, mintues);
                timer.start();
                timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerComplete);
            }
        }

        private function removeTimer():void {
            if (timer) {
                timer.removeEventListener(TimerEvent.TIMER_COMPLETE, timerComplete);
                timer.stop();
            }
        }

        private function resetTimer():void {
            if (timer) {
                timer.reset();
                timer.start();
            }
        }

        private function initMenus():void {
            initTimer(spareMintues)
            //views.initChildren(null);

            var ms:MenuSupport = new MenuSupport(menuPanel);
            ms.createMenuItem('展开', function (e:Event):void {
                menuTree.expandChildrenOf(menus.node[0], true)
            }, true, true);
            ms.createMenuItem('收起', function (e:Event):void {
                menuTree.expandChildrenOf(menus.node[0], false)
            }, false, true);
        }

        //用上下键切换菜单时，可能由于SWFLoader未及时完成的原因，报空指针错误
        //Flex官方sample：Explorer，也存在同样的问题。
        //所以把键盘事件屏蔽,并且每次初始化一个SWFLoader实例
        private function menuClick():void {
            if (!menuTree.selectedItem)
                return;
            var nodeApp:String = menuTree.selectedItem.@app;

            if (nodeApp) {
                views.displayModule(nodeApp)
                appWindow.title = String(menuTree.selectedItem.@label).concat(appTitle);
            }
            else
                menuTree.expandItem(menuTree.selectedItem,
                        !menuTree.isItemOpen(menuTree.selectedItem), true);

        }

        private function onStageClick(e:MouseEvent):void {
            trace('x: ', e.stageX, ' y: ', e.stageY);
            resetTimer();
        }

        private function switchMenu():void {
            if (hdb.numChildren > 1)
                hdb.removeChild(menuPanel);
            else
                hdb.addChildAt(menuPanel, 0);
        }

        private function timerComplete(e:Event):void {
            if (holdHeartBeat) {
                ms.heartBeat();
                resetTimer();
            }
            else
                Alert.show(MessageUtil.getMessage('由于安全原因，系统在空闲{1}分钟以后自动退出。',
                        [spareMintues]), null, Alert.OK, this, logout);
        }

        /**
         * 初始化数据字典，系统启动主界面必须调用
         * @param dictServiceDest 字典初始化的service
         * @param moreDictMethods 附加的字典初始化方法列表
         */
        public function initDictionary(dictServiceDest:String = 'flexDictionaryService', moreDictMethods:Array = null):void {
            popLogin.addEventListener("loginSuccess", loginSuccess);
            var ds:RemoteObject = RemoteUtil.createRemoteObject(dictServiceDest);
            //Session['LoginUser']切换用户后会更新，下面方法在不刷新页面的情况下不更新
            //重新打开页面时，如果session还在，不需再次登录，但未刷新时，需以Session['LoginUser']为准
            var methodList:ArrayCollectionPlus = new ArrayCollectionPlus(
                    ['getSessionUser', 'getAllUserList',
                        'getAllRoleList', 'getParamList',
                        'getParamTypeList', 'getDepartmentList',
                        'getLabelList', 'getHotLabelList']);
            methodList.addItemArray(moreDictMethods)
            for each(var method:String in methodList)
                ds.getOperation(method).send()
            DictManager.init(ds, methodList.length, this);
            initComplete();
        }

        /**
         * 初始功能模块，系统启动主界面必须调用
         * @param moreModules 附加的功能菜单
         * @param showWelcome 首页显示webcome还是about，about隐藏了通知功能
         */
        public function initViews(moreModules:Array = null, showWelcomeFirst:Boolean = true):void {
            this.showWelcomeFirst = showWelcomeFirst;
            views.initModules(moreModules)
            appWindow.addChild(views);
        }

        private function initComplete():void {
            if (!DictManager.initCompleted) {
                trace('initComplete', new Date());
                callLater(initComplete);
                return;
            }

            var params:Object = {};
            DictManager.getList('getParamList').each(function (item:Object):void {
                params[item.code] = item.value;
            });
            Session['ParamMap'] = params;
            menuPanel.title = '功能菜单';
            holdHeartBeat = (Session['ParamMap'].HoldHeartBeat == 'true');
            spareMintues = int(Session['ParamMap'].SpareMintues);

            //检查是否已登录
            Session['LoginUser'] = DictManager.getResult('getSessionUser');
            if (Session['LoginUser'])
                loginSuccess();
            else
                PopUpManager.addPopUp(popLogin, this, true);
        }


        private function loginSuccess(e:Event = null):void {
            //用户角色登录成功后才能去取
            DictManager.dictionaryService.getUserRoles(Session['LoginUser'].account)
            views.selectedIndex = showWelcomeFirst ? 0 : 1;
            initTimer(spareMintues);
            ms.getUserTree();
            appTitle =
                    String('(').concat(MessageUtil.getMessage(' {1},欢迎您!',
                            [Session['LoginUser'].name]), ')');

            initMenus();
        }

        private function logout():void {
            removeTimer();
            PopUpManager.addPopUp(popLogin, this, true);
            popLogin.clear();
        }
        ]]>
	</mx:Script>
    <mx:RemoteObject id="ms" destination="flexMenuService"
                     fault="MessageUtil.showError(event)">
        <mx:method name="getUserTree"
                   result="menus=new XML(ms.getUserTree.lastResult)"/>
    </mx:RemoteObject>
    <mx:HDividedBox id="hdb" width="100%" height="100%">
        <mx:Panel id="menuPanel" width="200" height="100%" title="{menuTitle}">
            <mx:Tree id="menuTree" width="100%" height="100%" wordWrap="false"
                     showRoot="false" dataProvider="{menus.node}" labelField="@label"
                     click="menuClick()"/>
        </mx:Panel>
        <controls:TitleWindowPlus id="appWindow" width="100%" height="100%"
                                  showCloseButton="true" title="{appTitle}"
                                  close="logout()"
                                  titleDoubleClick="switchMenu()">
        </controls:TitleWindowPlus>
    </mx:HDividedBox>
</mx:HDividedBox>
