{"version":3,"sources":["../../../oo-graphql-service/lib/mobx/MobxDomainStore.js","../../../oo-graphql-service/lib/DomainService.js","../../../oo-graphql-service/lib/DomainGraphql.js","pages/Welcome.tsx","components/EntityList.tsx","utils/config.ts","stores/MenuStore.ts","services/MenuService.ts","services/InitService.ts","services/index.ts","utils/myutils.ts","pages/Role.tsx","pages/User.tsx","pages/Note.tsx","components/EntityPageList.tsx","pages/Param.tsx","pages/Profile.tsx","components/MenuTree.tsx","pages/Home.tsx","pages/Login.tsx","App.tsx","serviceWorker.ts","index.tsx","../../../oo-graphql-service/lib/index.js","../../../oo-graphql-service/lib/ooGrahpqlMobxUtils.js"],"names":["Object","defineProperty","exports","value","mobx_1","__webpack_require__","MobxDomainStore","pageInfo","currentItem","allList","pageList","this","currentPage","totalCount","isLastPage","pageSize","decorate","observable","default","__assign","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","__importDefault","mod","__esModule","ooGrahpqlMobxUtils_1","upperFirst_1","DomainService","domain","storeClass","domainGraphql","store","fieldsPromise","getFields","findFirst","criteria","_this","list","then","data","changeCurrentItem","results","listAll","options","_a","_b","_c","_d","orders","defaultOrders","processCriteriaPage","processCriteriaOrder","fields","get","enumerable","configurable","listPage","isAppend","rest","concat","listNextPage","param","listFirstPage","clearList","create","newItem","update","id","updateItem","delete","__makeTemplateObject","cooked","raw","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","templateObject_1","templateObject_2","templateObject_3","templateObject_4","templateObject_5","templateObject_6","graphql_tag_1","DomainGraphql","apolloClient","defaultVariables","console","debug","query","fetchPolicy","variables","JSON","stringify","mutate","mutation","pureGraphqlObject","updateValue","version","typeName","level","maxLevel","type","acc","field","nestType","nestFields","getType","__type","kind","ofType","name","join","Welcome","props","react_default","a","createElement","account","EntityList","tableProps","loading","pagination","showLoading","domainService","queryParam","promise","_this2","updateState","finally","setState","Component","config","graphqlUri","dateFormat","timeFormat","asset","logoUrl","cardThumbUrl","systemInfo","MenuStore","menu","subMenus","Array","MenuService","classCallCheck","possibleConstructorReturn","getPrototypeOf","menuNodeFields","token","gql","_templateObject","objectSpread","menuTree","InitService","menuService","log","getMenuTree","uri","createApolloClient","paramService","roleService","initService","timeFormater","date","moment","format","booleanLabel","columns","title","dataIndex","render","Role","observer","table","dataSource","bordered","rowKey","User","Note","EntityPageList","onChange","pageChange","bind","assertThisInitialized","onShowSizeChange","pageSizeChange","showSizeChanger","showQuickJumper","showTotal","total","tag","color","page","current","size","paramStore","Param","Profile","SubMenu","Menu","MenuTree","_ref","rootMenu","theme","defaultSelectedKeys","mode","map","menuNode","getTree","app","Item","key","icon","react_router_dom","to","style","display","subNode","Header","Layout","Content","Footer","Sider","Home","state","collapsed","onCollapse","menuStore","layout","minHeight","className","collapsible","margin","padding","background","height","react_router","path","component","textAlign","Login","init","App","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","apollo_client_1","apollo_link_batch_http_1","apollo_cache_inmemory_1","MobxDomainStore_1","DomainGraphql_1","DomainService_1","toFetch","fetch","link","BatchHttpLink","cache","InMemoryCache","isObject_1","max","offset","order","reduce","notNestOrders","split","parentParam_1","slice","forEach","taroRequest","defaultOptions","url","fetchOptions","dataType","responseType","res","text","obj","errors","undefined","__typename","lastUpdated","dateCreated","values"],"mappings":"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","file":"static/js/main.3ce65896.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar mobx_1 = require(\"mobx\");\n/**\n * Mobx Store基类\n * 内部的属性会被JSON.stringify序列化，如果是嵌套结构或大对象，可以用Promise包装，规避序列化\n */\n\n\nvar MobxDomainStore =\n/** @class */\nfunction () {\n  function MobxDomainStore(pageInfo, currentItem, allList, pageList) {\n    if (pageInfo === void 0) {\n      pageInfo = null;\n    }\n\n    if (currentItem === void 0) {\n      currentItem = null;\n    }\n\n    if (allList === void 0) {\n      allList = null;\n    }\n\n    if (pageList === void 0) {\n      pageList = null;\n    }\n\n    this.pageInfo = pageInfo;\n    this.currentItem = currentItem;\n    this.allList = allList;\n    this.pageList = pageList;\n    if (!pageInfo) this.pageInfo = {\n      currentPage: 1,\n      totalCount: -1,\n      isLastPage: false,\n      pageSize: 10\n    };\n  }\n\n  return MobxDomainStore;\n}();\n\nmobx_1.decorate(MobxDomainStore, {\n  currentItem: mobx_1.observable,\n  allList: mobx_1.observable,\n  pageList: mobx_1.observable,\n  pageInfo: mobx_1.observable\n});\nexports.default = MobxDomainStore;","\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ooGrahpqlMobxUtils_1 = require(\"./ooGrahpqlMobxUtils\");\n\nvar upperFirst_1 = __importDefault(require(\"lodash/upperFirst\"));\n/**\n * Mobx Store基类\n * 内部的属性会被JSON.stringify序列化，如果是嵌套结构或大对象，可以用Promise包装，规避序列化\n */\n\n\nvar DomainService =\n/** @class */\nfunction () {\n  /**\n   *\n   * @param domain\n   * @param graphqlClient\n   * @param dependStoreMap 依赖的其它store，格式如下：{aaStore:aa,bbStore:bb}\n   */\n  function DomainService(domain, storeClass, domainGraphql) {\n    this.domain = domain;\n    this.storeClass = storeClass;\n    this.domainGraphql = domainGraphql;\n    this.store = new storeClass();\n    this.fieldsPromise = domainGraphql.getFields(upperFirst_1.default(domain));\n  }\n\n  DomainService.prototype.findFirst = function (criteria) {\n    var _this = this;\n\n    if (criteria === void 0) {\n      criteria = null;\n    }\n\n    var pageInfo = {\n      pageSize: 1,\n      currentPage: 1\n    };\n    return this.list({\n      criteria: criteria,\n      pageInfo: pageInfo\n    }).then(function (data) {\n      return data.totalCount > 0 && _this.changeCurrentItem(data.results[0]);\n    });\n  };\n  /**\n   * 返回后设置 allList\n   * @param criteria\n   * @returns {Promise<{client: *, fields?: *}>}\n   */\n\n\n  DomainService.prototype.listAll = function (options) {\n    var _this = this;\n\n    return this.list(options).then(function (data) {\n      _this.store.allList = data.results;\n      return data;\n    });\n  };\n  /**\n   * 不改变类成员变量\n   * @param criteria\n   * @param pageInfo\n   * @param orders\n   * @returns {Promise<{client: *, fields?: *}>}\n   */\n\n\n  DomainService.prototype.list = function (_a) {\n    var _this = this;\n\n    var _b = _a.criteria,\n        criteria = _b === void 0 ? {} : _b,\n        _c = _a.pageInfo,\n        pageInfo = _c === void 0 ? null : _c,\n        _d = _a.orders,\n        orders = _d === void 0 ? this.defaultOrders : _d;\n    if (pageInfo) ooGrahpqlMobxUtils_1.processCriteriaPage(criteria, pageInfo);\n    if (orders && orders.length > 0) ooGrahpqlMobxUtils_1.processCriteriaOrder(criteria, orders); //list需等待fieldsPromise执行完成\n\n    return this.fieldsPromise.then(function (fields) {\n      return _this.domainGraphql.list(_this.domain, fields, criteria);\n    });\n  };\n\n  Object.defineProperty(DomainService.prototype, \"defaultOrders\", {\n    /**\n     * 如需默认排序，重载本方法\n     * @returns {null}\n     */\n    get: function get() {\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * 返回后设置 pageInfo pageList allList\n   *\n   *\n   * @param {boolean} isAppend\n   * @param {PageInfo} pageInfo 此处传入pageInfo无效，以store.pageInfo为准\n   * @param {{criteria?: Criteria; orders?: CriteriaOrder[]}} rest\n   * @returns {Promise<ListResult>}\n   */\n\n  DomainService.prototype.listPage = function (_a) {\n    var _this = this;\n\n    var _b = _a.isAppend,\n        isAppend = _b === void 0 ? false : _b,\n        pageInfo = _a.pageInfo,\n        rest = __rest(_a, [\"isAppend\", \"pageInfo\"]); //查询第一页的时候，清空allList\n\n\n    if (pageInfo) this.store.pageInfo = pageInfo;\n    if (this.store.pageInfo.currentPage === 1) this.store.allList = [];\n    return this.list(__assign({\n      pageInfo: this.store.pageInfo\n    }, rest)).then(function (data) {\n      var results = data.results,\n          totalCount = data.totalCount;\n      _this.store.pageList = results;\n      _this.store.pageInfo.totalCount = totalCount;\n      _this.store.pageInfo.isLastPage = results.length < _this.store.pageInfo.pageSize || _this.store.pageInfo.pageSize * _this.store.pageInfo.currentPage >= totalCount;\n      if (isAppend === true) _this.store.allList = _this.store.allList.concat(results);else _this.store.allList = results;\n      return data;\n    });\n  };\n\n  DomainService.prototype.listNextPage = function (param) {\n    if (this.store.pageInfo.isLastPage) return '已经到底了';else {\n      this.store.pageInfo.currentPage++;\n      return this.listPage(param);\n    }\n  };\n\n  DomainService.prototype.listFirstPage = function (param) {\n    this.store.pageInfo.currentPage = 1;\n    return this.listPage(param);\n  };\n\n  DomainService.prototype.clearList = function () {\n    this.store.pageList = [];\n    this.store.allList = [];\n  };\n\n  DomainService.prototype.changeCurrentItem = function (currentItem) {\n    this.store.currentItem = currentItem;\n    return currentItem;\n  };\n\n  DomainService.prototype.create = function (newItem) {\n    var _this = this;\n\n    return this.fieldsPromise.then(function (fields) {\n      return _this.domainGraphql.create(_this.domain, fields, newItem);\n    }).then(function (data) {\n      return _this.changeCurrentItem(data);\n    });\n  };\n\n  DomainService.prototype.update = function (id, updateItem) {\n    var _this = this;\n\n    return this.fieldsPromise.then(function (fields) {\n      return _this.domainGraphql.update(_this.domain, fields, id, updateItem);\n    }).then(function (data) {\n      return _this.changeCurrentItem(data);\n    });\n  };\n\n  DomainService.prototype.get = function (id) {\n    var _this = this;\n\n    return this.fieldsPromise.then(function (fields) {\n      return _this.domainGraphql.get(_this.domain, fields, id);\n    }).then(function (data) {\n      return _this.changeCurrentItem(data);\n    });\n  };\n\n  DomainService.prototype.delete = function (id) {\n    return this.domainGraphql.delete(this.domain, id);\n  };\n\n  return DomainService;\n}();\n\nexports.default = DomainService;","\"use strict\";\n\nvar __makeTemplateObject = this && this.__makeTemplateObject || function (cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n};\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_tag_1 = __importDefault(require(\"graphql-tag\"));\n\nvar upperFirst_1 = __importDefault(require(\"lodash/upperFirst\"));\n\nvar ooGrahpqlMobxUtils_1 = require(\"./ooGrahpqlMobxUtils\");\n/**\n * 和gorm后台框架交互的graphql服务类\n */\n\n\nvar DomainGraphql =\n/** @class */\nfunction () {\n  /**\n   *\n   * @param defaultVariables graphql客户端的默认参数\n   * @param {ApolloClient<NormalizedCacheObject>} apolloClient 客户端\n   */\n  function DomainGraphql(apolloClient, defaultVariables) {\n    if (defaultVariables === void 0) {\n      defaultVariables = {};\n    }\n\n    this.apolloClient = apolloClient;\n    this.defaultVariables = defaultVariables;\n  } //fetchPolicy\n  //@see https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-config-options-fetchPolicy\n\n\n  DomainGraphql.prototype.list = function (domain, fields, criteria) {\n    if (criteria === void 0) {\n      criteria = null;\n    }\n\n    console.debug('Graphql.list', domain, criteria);\n    return this.apolloClient.query({\n      query: graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n                query \", \"ListQuery($criteria:String){\\n                  \", \"List(criteria:$criteria){\\n                        results {\\n                          \", \"\\n                        }\\n                        totalCount\\n                  }\\n                }\"], [\"\\n                query \", \"ListQuery($criteria:String){\\n                  \", \"List(criteria:$criteria){\\n                        results {\\n                          \", \"\\n                        }\\n                        totalCount\\n                  }\\n                }\"])), domain, domain, fields),\n      fetchPolicy: 'no-cache',\n      variables: __assign({}, this.defaultVariables, {\n        criteria: JSON.stringify(criteria)\n      })\n    }).then(function (data) {\n      return data.data[domain + \"List\"];\n    });\n  };\n\n  DomainGraphql.prototype.get = function (domain, fields, id) {\n    console.debug('Graphql.get', domain, id);\n    return this.apolloClient.query({\n      query: graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n                query \", \"Get($id:String!){\\n                  \", \"(id:$id){\\n                    \", \"\\n                  }\\n                }\"], [\"\\n                query \", \"Get($id:String!){\\n                  \", \"(id:$id){\\n                    \", \"\\n                  }\\n                }\"])), domain, domain, fields),\n      fetchPolicy: 'no-cache',\n      variables: __assign({}, this.defaultVariables, {\n        id: id\n      })\n    }).then(function (data) {\n      return data.data[domain];\n    });\n  };\n\n  DomainGraphql.prototype.create = function (domain, fields, value) {\n    var _a;\n\n    console.debug('Graphql.create', domain, value);\n    return this.apolloClient.mutate({\n      mutation: graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n                mutation \", \"CreateMutate($\", \":\", \"Create){\\n                  \", \"Create(\", \":$\", \"){\\n                    \", \"\\n                  }\\n                }\"], [\"\\n                mutation \", \"CreateMutate($\", \":\", \"Create){\\n                  \", \"Create(\", \":$\", \"){\\n                    \", \"\\n                  }\\n                }\"])), domain, domain, upperFirst_1.default(domain), domain, domain, domain, fields),\n      fetchPolicy: 'no-cache',\n      variables: __assign({}, this.defaultVariables, (_a = {}, _a[domain] = value, _a))\n    }).then(function (data) {\n      return data.data[domain + \"Create\"];\n    });\n  };\n\n  DomainGraphql.prototype.update = function (domain, fields, id, value) {\n    var _a;\n\n    console.debug('Graphql.update', domain, id, value); // version 被配置为 @JsonIgnoreProperties ，如果传入会导致Null异常\n    // todo 但没有version也有缺陷，无法规避本地修改的对象已经被别人修改这种情况，如有类似需求再做优化\n    // 其它属性如果传入会导致graphql校验异常\n\n    var _b = ooGrahpqlMobxUtils_1.pureGraphqlObject(value),\n        removeId = _b.id,\n        version = _b.version,\n        updateValue = __rest(_b, [\"id\", \"version\"]);\n\n    return this.apolloClient.mutate({\n      mutation: graphql_tag_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject([\"\\n                mutation \", \"UpdateMutate($id:String!, $\", \":\", \"Update){\\n                  \", \"Update(id:$id, \", \":$\", \"){\\n                    \", \"\\n                  }\\n                }\"], [\"\\n                mutation \", \"UpdateMutate($id:String!, $\", \":\", \"Update){\\n                  \", \"Update(id:$id, \", \":$\", \"){\\n                    \", \"\\n                  }\\n                }\"])), domain, domain, upperFirst_1.default(domain), domain, domain, domain, fields),\n      fetchPolicy: 'no-cache',\n      variables: __assign({}, this.defaultVariables, (_a = {}, _a[domain] = updateValue, _a.id = id, _a))\n    }).then(function (data) {\n      return data.data[domain + \"Update\"];\n    });\n  };\n\n  DomainGraphql.prototype.delete = function (domain, id) {\n    console.debug('Graphql.delete', domain, id);\n    return this.apolloClient.mutate({\n      mutation: graphql_tag_1.default(templateObject_5 || (templateObject_5 = __makeTemplateObject([\"\\n                mutation \", \"DeleteMutate($id:String!){\\n                  \", \"Delete(id:$id){\\n                    success\\n                    error\\n                  }\\n                }\"], [\"\\n                mutation \", \"DeleteMutate($id:String!){\\n                  \", \"Delete(id:$id){\\n                    success\\n                    error\\n                  }\\n                }\"])), domain, domain),\n      fetchPolicy: 'no-cache',\n      variables: __assign({}, this.defaultVariables, {\n        id: id\n      })\n    }).then(function (data) {\n      return data.data[domain + \"Delete\"];\n    });\n  };\n\n  DomainGraphql.prototype.getFields = function (typeName, level, maxLevel) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    if (maxLevel === void 0) {\n      maxLevel = 6;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var type, fields, acc, i, field, nestType, nestFields;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (level >= maxLevel) return [2\n            /*return*/\n            , null];\n            console.debug('Graphql.getFields', typeName);\n            return [4\n            /*yield*/\n            , this.getType(typeName)];\n\n          case 1:\n            type = _a.sent();\n            if (!(type && type.data)) return [2\n            /*return*/\n            , null];\n            fields = type.data.__type.fields;\n            acc = [];\n            i = 0;\n            _a.label = 2;\n\n          case 2:\n            if (!(i < fields.length)) return [3\n            /*break*/\n            , 6];\n            field = fields[i];\n            nestType = null; //LIST类型，仅取Error，其它忽略\n\n            if (field.type.kind === 'LIST')\n              /*if (field.type.ofType.name === 'Error')\n                nestType = 'Error';\n              else\n                continue;*/\n              nestType = field.type.ofType.name;else if (field.type.kind === 'OBJECT') nestType = field.type.name;\n            if (!nestType) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.getFields(nestType, level + 1, maxLevel)];\n\n          case 3:\n            nestFields = _a.sent();\n            if (nestFields) acc.push(field.name + \"{\" + nestFields + \"}\");\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            acc.push(field.name);\n            _a.label = 5;\n\n          case 5:\n            i++;\n            return [3\n            /*break*/\n            , 2];\n\n          case 6:\n            return [2\n            /*return*/\n            , acc.join(',')];\n        }\n      });\n    });\n  };\n\n  DomainGraphql.prototype.getType = function (type) {\n    return this.apolloClient.query({\n      query: graphql_tag_1.default(templateObject_6 || (templateObject_6 = __makeTemplateObject([\"query \", \"TypeQuery($type:String!){\\n                  __type(name:$type){\\n                    fields{\\n                      name      \\n                      type {\\n                        kind\\n                        name\\n                        ofType{\\n                          name\\n                          kind                          \\n                        }\\n                      }\\n                    }\\n                  }\\n                }\"], [\"query \", \"TypeQuery($type:String!){\\n                  __type(name:$type){\\n                    fields{\\n                      name      \\n                      type {\\n                        kind\\n                        name\\n                        ofType{\\n                          name\\n                          kind                          \\n                        }\\n                      }\\n                    }\\n                  }\\n                }\"])), type),\n      variables: __assign({}, this.defaultVariables, {\n        type: type\n      })\n    });\n  };\n\n  return DomainGraphql;\n}();\n\nexports.default = DomainGraphql;\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;","import React, { Component } from 'react'\n\nexport default (props: any) => <div>Welcome {props.account}</div>\n","import React, { Component } from 'react'\nimport DomainService, { ListOptions } from 'oo-graphql-service/lib/DomainService';\nimport MobxDomainStore from 'oo-graphql-service/lib/mobx/MobxDomainStore';\nimport { ListResult } from 'oo-graphql-service/lib/DomainGraphql';\nimport { TableProps } from 'antd/lib/table';\nimport { Entity } from 'oo-graphql-service';\n\nexport interface EntityListState {\n  tableProps?: TableProps<Entity>\n}\n\n\nabstract class EntityList<P =any, S extends EntityListState= EntityListState>\n  extends Component<P, S> {\n  tableProps: TableProps<Entity> = { loading: false, pagination: false }\n\n  abstract get domainService(): DomainService<MobxDomainStore>;\n\n  query(): Promise<ListResult> {\n    return this.showLoading<ListResult>(this.domainService.listAll(this.queryParam))\n  }\n\n  showLoading<T>(promise: Promise<T>): Promise<T> {\n    this.tableProps.loading = true\n    this.updateState()\n    return promise.finally(() => {\n      this.tableProps.loading = false\n      this.updateState()\n    })\n  }\n\n  componentDidMount(): void {\n    this.query()\n  }\n\n  protected updateState(): void {\n    this.setState({ tableProps: this.tableProps })\n  }\n\n  protected get queryParam(): ListOptions {\n    return {};\n  }\n}\n\nexport default EntityList;\n","\nconst config = {\n  graphqlUri: 'http://localhost:8080/graphql',\n  dateFormat: 'MM-DD',\n  timeFormat: 'YYYY-MM-DD HH:mm',\n  asset: {\n    logoUrl: 'http://attach.neoscript.wang/tax-deduct-logo-1.1.3.jpg',\n    cardThumbUrl: 'http://attach.neoscript.wang/icon-red-diamond.png',\n  },\n  systemInfo: {}\n}\n\nexport default config\n","import { observable } from 'mobx';\nimport MobxDomainStore from 'oo-graphql-service/lib/mobx/MobxDomainStore';\nimport { Entity } from 'oo-graphql-service';\n\nexport interface MenuNode {\n  menu: Entity;\n  subMenus: Array<MenuNode>\n}\n\nclass MenuStore extends MobxDomainStore {\n  @observable\n  menuTree: MenuNode = { menu: {}, subMenus: new Array<MenuNode>() };\n}\n\nexport default MenuStore\n","import { DomainGraphql, Entity } from 'oo-graphql-service'\n\nimport gql from 'graphql-tag';\nimport MenuStore, { MenuNode } from '../stores/MenuStore';\nimport DomainService from 'oo-graphql-service/lib/DomainService';\n\nexport default class MenuService extends DomainService<MenuStore> {\n  menuNodeFields: Promise<string>;\n\n  constructor(domainGraphql: DomainGraphql) {\n    super('menu', MenuStore, domainGraphql);\n    this.menuNodeFields = domainGraphql.getFields('MenuNode')\n  }\n\n  getMenuTree(token: String): void {\n    this.menuNodeFields.then(fields =>\n      this.domainGraphql.apolloClient.query<{ [key: string]: MenuNode }>({\n        query: gql`query menuTree {\n                      menuTree(token: \"${token}\") {\n                      ${fields}\n                    }}`,\n        fetchPolicy: 'no-cache',\n        variables: {\n          ...this.domainGraphql.defaultVariables\n        }\n      }))\n      .then(result => this.store.menuTree = result.data.menuTree)\n  }\n}\n","import MenuService from './MenuService';\n\nexport default class InitService {\n  constructor(private menuService: MenuService) {\n  }\n\n  init(): void {\n    console.log('InitService')\n    this.menuService.getMenuTree('gorm-dev-token')\n  }\n}\n","import {\n  createApolloClient,\n  DomainGraphql,\n  MobxDomainStore,\n  DomainService\n} from 'oo-graphql-service'\nimport config from '../utils/config'\nimport MenuService from '../services/MenuService';\nimport InitService from './InitService';\n\nconst uri = config.graphqlUri;\nconst defaultVariables = { token: 'gorm-dev-token' }\n\nconst apolloClient = createApolloClient(uri)\nconst domainGraphql: DomainGraphql = new DomainGraphql(apolloClient, defaultVariables);\n\nexport const paramService = new DomainService('param', MobxDomainStore, domainGraphql);\nexport const roleService = new DomainService('role', MobxDomainStore, domainGraphql);\nexport const menuService = new MenuService(domainGraphql);\nexport const initService = new InitService(menuService)\n\n","import { ReactNode } from 'react'\nimport moment from 'moment';\nimport { PaginationConfig } from 'antd/lib/table';\nimport { PageInfo } from 'oo-graphql-service/lib/DomainStore';\n\nexport function timeFormater(date: Date): ReactNode {\n  return moment(date)\n    .format('YYYY-MM-DD hh:mm')\n}\n\nexport function booleanLabel(value: boolean): ReactNode {\n  return value ? '是' : '否'\n}\n\nexport function toPageInfo(pagination: PaginationConfig): PageInfo {\n  return {\n    currentPage: pagination.current,\n    pageSize: pagination.pageSize,\n    totalCount: pagination.total\n  }\n}\n","import React, { ReactNode } from 'react'\nimport { Table } from 'antd';\nimport EntityList from '../components/EntityList';\nimport { roleService } from '../services';\nimport { ColumnProps } from 'antd/lib/table';\nimport { booleanLabel, timeFormater } from '../utils/myutils';\nimport { Entity } from 'oo-graphql-service';\nimport { observer } from 'mobx-react';\nimport MobxDomainStore from 'oo-graphql-service/lib/mobx/MobxDomainStore';\nimport DomainService, { ListOptions } from 'oo-graphql-service/lib/DomainService';\n\nconst columns: Array<ColumnProps<Entity>> = [\n  { title: '角色名', dataIndex: 'roleName' },\n  { title: '角色代码(unique)', dataIndex: 'roleCode' },\n  { title: '启用', dataIndex: 'enabled', render: booleanLabel },\n  { title: '可编辑', dataIndex: 'editable', render: booleanLabel },\n  { title: '描述', dataIndex: 'description' },\n  { title: '修改时间', dataIndex: 'lastUpdated', render: timeFormater }];\n\n@observer\nclass Role extends EntityList {\n\n  render(): ReactNode {\n    return (\n      <Table dataSource={roleService.store.allList}\n             columns={columns}\n             bordered\n             rowKey='id'\n             {...this.tableProps}>\n      </Table>)\n  }\n\n  get domainService(): DomainService<MobxDomainStore> {\n    return roleService;\n  }\n\n  protected get queryParam(): ListOptions {\n    return { orders: [['lastUpdated', 'desc']] };\n  }\n}\n\nexport default Role;\n","import React, { Component } from 'react'\n\nexport default (props: any) => <div>User {props.account}</div>\n","import React, { Component } from 'react'\n\nexport default (props: any) => <div>Note {props.account}</div>\n","import React from 'react'\nimport { paramService } from '../services'\nimport { PaginationConfig, TableProps } from 'antd/lib/table';\nimport { toPageInfo } from '../utils/myutils';\nimport { ListResult } from 'oo-graphql-service/lib/DomainGraphql';\nimport EntityList, { EntityListState } from './EntityList';\nimport { Entity } from 'oo-graphql-service';\nimport { Tag } from 'antd';\n\nabstract class EntityPageList<P =any, S extends EntityListState= EntityListState>\n  extends EntityList<P, S> {\n\n  pagination: PaginationConfig = {\n    pageSize: 2,\n    onChange: this.pageChange.bind(this),\n    onShowSizeChange: this.pageSizeChange.bind(this),\n    showSizeChanger: true,\n    showQuickJumper: true,\n    showTotal: (total) => <Tag color=\"blue\">总记录数：{total}</Tag>\n  }\n  tableProps: TableProps<Entity> = {\n    loading: false, pagination: this.pagination\n  }\n\n  pageChange(page: number, pageSize?: number): void {\n    this.pagination.current = page;\n    this.query()\n  }\n\n  pageSizeChange(current: number, size: number): void {\n    this.pagination.pageSize = size\n    this.pagination.current = 1;\n    this.query()\n  }\n\n  query(): Promise<ListResult> {\n    const promise = paramService.listPage({\n      criteria: {},\n      pageInfo: toPageInfo(this.pagination),\n      orders: [['lastUpdated', 'desc',]]\n    })\n      .then((data: ListResult) => {\n        this.pagination.total = data.totalCount\n        return data\n      })\n    return this.showLoading<ListResult>(promise)\n  }\n}\n\nexport default EntityPageList\n","import React, { ReactNode } from 'react'\nimport { observer } from 'mobx-react';\nimport { Table } from 'antd';\nimport { paramService } from '../services'\nimport { ColumnProps } from 'antd/lib/table';\nimport { timeFormater } from '../utils/myutils';\nimport EntityPageList from '../components/EntityPageList';\nimport MobxDomainStore from 'oo-graphql-service/lib/mobx/MobxDomainStore';\nimport DomainService from 'oo-graphql-service/lib/DomainService';\nimport { Entity } from 'oo-graphql-service';\n\nconst { store: paramStore } = paramService\nconst columns: Array<ColumnProps<Entity>> = [\n  { title: '参数代码', dataIndex: 'code' },\n  { title: '参数名称', dataIndex: 'name' },\n  { title: '参数类型', dataIndex: 'type.name' },\n  { title: '参数值', dataIndex: 'value' },\n  { title: '修改人', dataIndex: 'lastUser.name' },\n  { title: '修改时间', dataIndex: 'lastUpdated', render: timeFormater }];\n\n\n@observer\nexport default class Param extends EntityPageList {\n\n  render(): ReactNode {\n    return (\n      <Table dataSource={paramStore.pageList}\n             columns={columns}\n             bordered\n             {...this.tableProps}\n             rowKey='id'>\n      </Table>)\n  }\n\n  get domainService(): DomainService<MobxDomainStore> {\n    return paramService;\n  }\n}\n","import React, { Component } from 'react'\n\nexport default (props: any) => <div>Profile {props.account}</div>\n","import React from 'react'\nimport { Menu, Icon } from 'antd'\nimport { Link } from 'react-router-dom';\nimport { MenuNode } from '../stores/MenuStore';\n\nconst SubMenu = Menu.SubMenu\n\nfunction getTree(menuNode: MenuNode) {\n  if (menuNode.menu.app)\n    return (\n      <Menu.Item key={menuNode.menu.id}>\n        <Icon type=\"file\" />\n        <Link to={`/${menuNode.menu.app}/`} style={{ display: 'inline' }}>{menuNode.menu.label}</Link>\n      </Menu.Item>)\n  else\n    return (<SubMenu key={menuNode.menu.id} title={<span><Icon type=\"folder\" />{menuNode.menu.label}</span>}>\n      {menuNode.subMenus.map((subNode) => getTree(subNode))}\n    </SubMenu>)\n}\n\nexport default ({ rootMenu }: { rootMenu: MenuNode }) =>\n  <Menu theme=\"light\" defaultSelectedKeys={['1']} mode=\"inline\">\n    {rootMenu.subMenus.map((menuNode) => getTree(menuNode))}\n  </Menu>\n","import React, { Component } from 'react'\nimport { Layout } from 'antd'\nimport { observer } from 'mobx-react'\nimport { Route, Switch } from 'react-router-dom';\nimport Welcome from './Welcome';\nimport Role from './Role';\nimport User from './User';\nimport Note from './Note';\nimport Param from './Param';\nimport Profile from './Profile';\nimport MenuTree from '../components/MenuTree';\nimport { menuService } from '../services';\n\nconst {\n  Header, Content, Footer, Sider\n} = Layout\n\n@observer\nclass Home extends Component<any, { collapsed: boolean }> {\n  state = {\n    collapsed: false,\n  }\n\n  onCollapse = (collapsed: boolean) => {\n    console.log(collapsed)\n    this.setState({ collapsed })\n  }\n\n  render() {\n    const { store: menuStore } = menuService;\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Header>\n          <div className=\"logo\"/>\n        </Header>\n        <Layout>\n          <Sider\n            collapsible\n            collapsed={this.state.collapsed}\n            onCollapse={this.onCollapse}\n            theme=\"light\"\n          >\n            <MenuTree rootMenu={menuStore.menuTree} />\n          </Sider>\n          <Layout>\n            <Content style={{ margin: '1rem', padding: 24, background: '#fff', height: '100%', minHeight: 360 }}>\n              <Switch>\n                <Route path=\"/Role/\" component={Role} />\n                <Route path=\"/User/\" component={User} />\n                <Route path=\"/Note/\" component={Note} />\n                <Route path=\"/Param/\" component={Param} />\n                <Route path=\"/Profile/\" component={Profile} />\n                <Route component={Welcome} />\n              </Switch>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              羽意软件 ©2019\n            </Footer>\n          </Layout>\n        </Layout>\n      </Layout>\n    )\n  }\n}\n\nexport default Home\n","import React, { Component } from 'react'\n\nexport default (props: any) => <div>Login {props.account}</div>\n","import React, { Component } from 'react'\nimport './App.css'\nimport Home from './pages/Home'\nimport { initService } from './services'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\n\ninitService.init()\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/login/\" component={Login} />\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar apollo_client_1 = __importDefault(require(\"apollo-client\"));\n\nvar apollo_link_batch_http_1 = require(\"apollo-link-batch-http\");\n\nvar apollo_cache_inmemory_1 = require(\"apollo-cache-inmemory\");\n\nvar MobxDomainStore_1 = __importDefault(require(\"./mobx/MobxDomainStore\"));\n\nexports.MobxDomainStore = MobxDomainStore_1.default;\n\nvar DomainGraphql_1 = __importDefault(require(\"./DomainGraphql\"));\n\nexports.DomainGraphql = DomainGraphql_1.default;\n\nvar DomainService_1 = __importDefault(require(\"./DomainService\"));\n\nexports.DomainService = DomainService_1.default;\n\nvar ooGrahpqlMobxUtils_1 = require(\"./ooGrahpqlMobxUtils\");\n\nexports.toFetch = ooGrahpqlMobxUtils_1.toFetch;\n\nfunction createApolloClient(uri, fetch) {\n  if (fetch === void 0) {\n    fetch = null;\n  } //WEB环境用浏览器原生fetch\n\n\n  var link = new apollo_link_batch_http_1.BatchHttpLink(fetch ? {\n    uri: uri,\n    fetch: fetch\n  } : {\n    uri: uri\n  });\n  var cache = new apollo_cache_inmemory_1.InMemoryCache();\n  return new apollo_client_1.default({\n    link: link,\n    cache: cache\n  });\n}\n\nexports.createApolloClient = createApolloClient;","\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isObject_1 = __importDefault(require(\"lodash/isObject\"));\n/**\n * 转换为gorm的分页模式\n *\n * @param criteria\n * @param currentPage\n * @param pageSize\n * @see org.grails.datastore.gorm.query.criteria.AbstractDetachedCriteria\n */\n\n\nfunction processCriteriaPage(criteria, pageInfo) {\n  //AbstractDetachedCriteria中的分页函数为max和offset\n  criteria.max = pageInfo.pageSize;\n  criteria.offset = (pageInfo.currentPage - 1) * pageInfo.pageSize;\n  return criteria;\n}\n\nexports.processCriteriaPage = processCriteriaPage;\n/**\n * 将字符串嵌套排序字段转化为gorm可处理的格式\n * @param param 传入是为了在原参数上做增量修改，如:\n *  processOrderParam({user:{eq:[['name','admin']]}},[['user.age','desc']])=>{user:{eq:[['name','admin']],order:[['age','desc']]}}\n * @param orders\n */\n\nfunction processCriteriaOrder(criteria, orders) {\n  //嵌套字段的排序criteria\n  criteria.order = orders.reduce(function (notNestOrders, order) {\n    if (typeof order === 'string' || order[0].indexOf('.') === -1) notNestOrders.push(order);else {\n      //['user.age','desc']=>['user','age']\n      var nestFields = order[0].split('.'); //order = ['age','desc']\n\n      order[0] = nestFields[nestFields.length - 1];\n      var parentParam_1 = criteria;\n      nestFields.slice(0, -1).forEach(function (field) {\n        if (!parentParam_1[field]) parentParam_1[field] = {};\n        parentParam_1 = parentParam_1[field];\n      });\n      if (parentParam_1.order) parentParam_1.order.push(order);else parentParam_1.order = [order];\n    }\n    return notNestOrders;\n  }, []);\n}\n\nexports.processCriteriaOrder = processCriteriaOrder;\n\nfunction toFetch(_a) {\n  var taroRequest = _a.taroRequest,\n      defaultOptions = _a.defaultOptions;\n  if (taroRequest) return function (url, _a) {\n    var data = _a.body,\n        fetchOptions = __rest(_a, [\"body\"]); //Taro.request默认会对res做JSON.parse，但apollo-http-link需要text，也要做一次JSON.parse\n    //所以要让微信返回text,需做如下配置：dataType: 'txt', responseType: 'text'\n    //dataType\tString\t否\tjson\t如果设为json，会尝试对返回的数据做一次 JSON.parse\n    //responseType\tString\t否\ttext\t设置响应的数据类型。合法值：text、arraybuffer\n\n\n    return taroRequest(__assign({\n      url: url,\n      data: data\n    }, defaultOptions, fetchOptions, {\n      dataType: 'txt',\n      responseType: 'text'\n    })).then(function (res) {\n      res.text = function () {\n        return Promise.resolve(res.data);\n      };\n\n      return res;\n    });\n  };else return null;\n}\n\nexports.toFetch = toFetch;\n/**\n * 删除对象中的部份属性，满足graphql新增、更新字段要求\n * @param obj\n */\n\nfunction pureGraphqlObject(obj) {\n  obj.errors = undefined;\n  obj.__typename = undefined;\n  obj.lastUpdated = undefined;\n  obj.dateCreated = undefined;\n  Object.values(obj).forEach(function (value) {\n    return isObject_1.default(value) && pureGraphqlObject(value);\n  });\n  return obj;\n}\n\nexports.pureGraphqlObject = pureGraphqlObject;"],"sourceRoot":""}